# Welcome to {{project_name}}!

This beginner-friendly Rust web application template uses the **Actix web framework** and **{{database}}** to help you quickly build APIs or web applications. It’s designed to be easy to set up, even if you’re new to Rust!

## Why Use This Template?
- **Fast Web Server**: Powered by Actix web with built-in logging and rate limiting.
- **Database Ready**: Connects to {{database}} using SQLx for reliable database operations.
- **Quick Testing**: Includes a `/health` endpoint to verify your server is running.
- **Flexible**: Easily add new endpoints or database features.

## What You’ll Need
Before you start, ensure you have:
- **Rust**: Latest stable version. Install from [rust-lang.org](https://www.rust-lang.org/tools/install).
  ```sh
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  ```
- **cargo-generate**: To create your project from this template:
  ```sh
  cargo install cargo-generate
  ```
{% if database == "sqlite" %}
- **SQLite**: No extra setup needed! SQLite uses a file-based database, created automatically.
{% endif %}
{% if database == "postgres" %}
- **PostgreSQL**: A running PostgreSQL server. Download from [postgresql.org](https://www.postgresql.org/download/).
{% endif %}
{% if database == "mysql" %}
- **MySQL**: A running MySQL server. Download from [mysql.com](https://www.mysql.com/downloads/).
{% endif %}

## Step-by-Step Setup
Let’s get your project running in just a few steps!

### Step 1: Create Your Project
1. Run this command to generate your project:
   ```sh
   cargo generate --git https://github.com/PRiEsTCSC/rust_webserver_template.git
   ```
2. Answer the prompts:
   - **Project name**: Enter a name (e.g., `myapp`). This names your project folder and Rust package.
   - **Database**: Choose `postgres`, `mysql`, or `sqlite`.

   This creates a folder (e.g., `myapp`) with all project files.

### Step 2: Set Up Your Database
{% if database == "postgres" %}
- Install PostgreSQL ([instructions](https://www.postgresql.org/download/)).
- Create a database (e.g., `mydb`):
  ```sh
  psql -U postgres -c "CREATE DATABASE mydb;"
  ```
- Note your username, password, and port (default: `5432`).
{% endif %}
{% if database == "mysql" %}
- Install MySQL ([instructions](https://www.mysql.com/downloads/)).
- Create a database (e.g., `mydb`):
  ```sh
  mysql -u root -p -e "CREATE DATABASE mydb;"
  ```
- Note your username, password, and port (default: `3306`).
{% endif %}
{% if database == "sqlite" %}
- No setup needed! Just choose a file name for your database (e.g., `mydb.sqlite`).
{% endif %}

### Step 3: Configure Your Environment
1. Go to your project folder:
   ```sh
   cd {{project_name}}
   ```
2. Create a `.env` file in the project root:
   ```sh
   echo "HOST=127.0.0.1" > .env
   echo "PORT=8080" >> .env
   echo "DATABASE_URL=<your_database_url>" >> .env
   ```
3. Set `DATABASE_URL` based on your database:
   {% if database == "postgres" %}
   ```sh
   DATABASE_URL=postgres://<username>:<password>@localhost:5432/mydb
   ```
   Example: `postgres://myuser:mypass@localhost:5432/mydb`
   {% endif %}
   {% if database == "mysql" %}
   ```sh
   DATABASE_URL=mysql://<username>:<password>@localhost:3306/mydb
   ```
   Example: `mysql://myuser:mypass@localhost:3306/mydb`
   {% endif %}
   {% if database == "sqlite" %}
   ```sh
   DATABASE_URL=sqlite://mydb.sqlite
   ```
   Example: `sqlite://mydb.sqlite`
   {% endif %}
   **Tip**: Replace `<username>`, `<password>`, and `mydb` with your actual credentials and database name. For SQLite, choose any valid file path.

### Step 4: Install Dependencies
Build the project to download dependencies:
```sh
cargo build
```
This may take a few minutes. If errors occur, see **Troubleshooting** below.

### Step 5: Run Your Application
Start the server:
```sh
cargo run
```
- The server runs at `http://127.0.0.1:8080`.
- Test it in another terminal:
  ```sh
  curl http://127.0.0.1:8080/health
  ```
- Expected output: `Server is healthy`.

**Great job!** Your server is live!

## What’s in Your Project?
Here’s a quick overview of the files:

| File/Folder | Purpose |
|-------------|---------|
| `src/main.rs` | Starts the app, setting up logging and the server. |
| `src/init.rs` | Configures the Actix web server with logging, rate limiting, and routes. |
| `src/configs/env_load.rs` | Loads `HOST`, `PORT`, and `DATABASE_URL` from `.env`. |
| `src/models/database.rs` | Connects to your {{database}} database with SQLx. |
| `src/routes/health.rs` | Provides the `/health` endpoint to check server status. |
| `log4rs.yaml` | Controls how logs are displayed (e.g., to the console). |

## Customizing Your Project
Here are some ways to make the project your own:

### Adding New Endpoints
1. Create a new file in `src/routes/` (e.g., `example.rs`):
   ```rust
   use actix_web::{get, HttpResponse, Responder};

   #[get("/example")]
   async fn example() -> impl Responder {
       HttpResponse::Ok().body("Hello from the example endpoint!")
   }
   ```
2. Update `src/routes/mod.rs`:
   ```rust
   pub mod health;
   pub mod example;
   ```
3. Add the endpoint to `src/init.rs` in `init_routes`:
   ```rust
   cfg.service(example::example);
   ```
4. Test it:
   ```sh
   curl http://127.0.0.1:8080/example
   ```

### Adding Database Queries
1. In `src/models/database.rs`, add a query function:
   ```rust
   impl DatabaseConnection {
       pub async fn get_users(&self) -> Result<Vec<String>, sqlx::Error> {
           let rows = sqlx::query_scalar("SELECT name FROM users")
               .fetch_all(&self.pool)
               .await?;
           Ok(rows)
       }
   }
   ```
2. Use it in a route (e.g., `src/routes/users.rs`):
   ```rust
   use actix_web::{get, web, HttpResponse, Responder};
   use crate::models::database::DatabaseConnection;

   #[get("/users")]
   async fn get_users(db: web::Data<DatabaseConnection>) -> impl Responder {
       match db.get_users().await {
           Ok(users) => HttpResponse::Ok().json(users),
           Err(e) => HttpResponse::InternalServerError().body(format!("Error: {}", e)),
       }
   }
   ```
3. Register the route in `src/init.rs`.

### Changing Settings
- **Logging**: Edit `log4rs.yaml` to save logs to a file or change verbosity:
  ```yaml
  appenders:
    file:
      kind: file
      path: "app.log"
  root:
    level: debug
    appenders:
      - file
  ```
- **Rate Limiting**: Adjust `src/init.rs`:
  ```rust
  .seconds_per_request(60) // One request per minute
  .burst_size(10) // Allow bursts of 10 requests
  ```

## Troubleshooting
- **“Database connection failed”**
  - Check `.env` file for correct `DATABASE_URL`.
  - For PostgreSQL/MySQL, ensure the server is running and credentials are valid.
  - For SQLite, verify the file path is accessible.
- **“Port already in use”**
  - Change `PORT` in `.env` (e.g., `8081`).
  - Or stop the conflicting process: `killall cargo`.
- **“Build fails”**
  - Update Rust: `rustup update`.
  - Clear cache: `cargo clean`.
  - Read error messages in the terminal.
- **“No logs appear”**
  - Ensure `log4rs.yaml` exists and is valid.
  - Set `level: debug` in `log4rs.yaml` for more output.

## Getting Help
- Check logs in the terminal or `app.log` (if configured).
- Visit [https://github.com/PRiEsTCSC/rust_webserver_template](https://github.com/PRiEsTCSC/rust_webserver_template) for issues or support.
- Ask questions in Rust communities like [r/rust](https://www.reddit.com/r/rust/).

## Contributing
Want to improve this template? Fork it, make changes, and submit a pull request at [https://github.com/PRiEsTCSC/rust_webserver_template](https://github.com/PRiEsTCSC/rust_webserver_template).

## License
MIT License—use, modify, and share freely!

## Next Steps
- Add a new endpoint (see “Adding New Endpoints”).
- Try database queries (see “Adding Database Queries”).
- Check out [Actix web docs](https://actix.rs/docs/) or [SQLx docs](https://docs.rs/sqlx) for more ideas.

Happy coding with {{project_name}}!