[template]
cargo_generate_version = ">=0.18.0"

[template.process]
include = [
    "**/*.rs",
    "**/*.yaml",
    ".env",
    "debug.txt"
]
exclude = ["Cargo.toml"]
[placeholders.description]
type = "string"
prompt = "\n\nProvide a short description of your project. This will appear in Cargo.toml and documentation."
default = "A Rust web server application built with Actix"

[placeholders.author_name]
type = "string"
prompt = "\n\nEnter your name. This will be listed as the author in Cargo.toml."
default = "Your Name"

[placeholders.database]
prompt = "\n\nChoose your database:    \n- postgres: PostgreSQL, a powerful relational database (requires a server).    \n- mysql: MySQL, a popular relational database (requires a server).    \n- sqlite: SQLite, a lightweight, file-based database (no server needed)."
type = "string"
choices = ["\n", "postgres", "mysql", "sqlite"]
default = "sqlite"
description = "The database backend for your project."

[placeholders.db_name]
type = "string"
prompt = "\n\nEnter the name of your database (e.g., 'mydb'). For SQLite, this will be the file name (e.g., 'mydb.sqlite').\n"
default = "mydb"
regex = "^[a-zA-Z][a-zA-Z0-9_-]*$"
description = "The name of the database used in the DATABASE_URL."

[placeholders.include_logging]
type = "bool"
prompt = "\n\nDo you want to include logging? This adds the log and log4rs crates for detailed logging to debug and monitor your application."
default = true

[placeholders.include_cors]
type = "bool"
prompt = "\n\nDo you want to include CORS support? This enables Cross-Origin Resource Sharing, needed if your API is accessed by web browsers from different domains."
default = true

[placeholders.server_port]
type = "string"
prompt = "\n\nSpecify the port for your server (e.g., '8080'). You can change this later in the .env file."
default = "8080"
regex = "^[0-9]+$"
description = "The port your web server will listen on."

[placeholders.use_docker]
type = "bool"
prompt = "\n\nDo you want to include Docker configuration? This generates a Dockerfile and docker-compose.yml to run your app and database in containers."
default = false


# Conditional file generation - CORRECT SYNTAX

[conditional.'include_logging == false']
ignore = ["log4rs.yaml"]

[conditional.'include_cors == false']
ignore = ["src/middleware/cors_mgt.rs", "src/middleware/mod.rs", "src/middleware/"]

[conditional.'use_docker == false']
ignore = ["Dockerfile", "docker-compose-postgres.yaml", "docker-compose-mysql.yaml", "docker-compose-sqlite.yaml"]

[conditional.'database == "sqlite" && use_docker == true']
ignore = ["docker-compose-postgres.yaml", "docker-compose-mysql.yaml"]

[conditional.'database == "mysql" && use_docker == true']
ignore = ["docker-compose-postgres.yaml", "docker-compose-sqlite.yaml"]

[conditional.'database == "postgres" && use_docker == true']
ignore = ["docker-compose-sqlite.yaml", "docker-compose-mysql.yaml"]


# [template.process]
# exclude = ["Cargo.toml"]
# include = [
#     "**/*.rs",
#     "**/*.yaml",
#     ".env",
#     "debug.txt"
# ]

# [files."Cargo.toml"]
# template = '''
# [package]
# name = "{{project-name}}"
# version = "0.1.0"
# edition = "2021"
# description = "{{description}}"
# authors = ["{{author_name}}"]

# [dependencies]
# actix-governor = "0.8.0"
# actix-web = "4.9.0"
# actix-cors = { version = "0.7.0", optional = true }
# chrono = { version = "0.4.40", features = ["serde"] }
# dotenv = "0.15.0"
# log = { version = "0.4.26", optional = true }
# log4rs = { version = "1.3.0", optional = true }
# rust_decimal = "1.36.0"
# serde = { version = "1.0.218", features = ["derive"] }
# serde_json = "1.0.139"
# sqlx = { version = "0.8.3", features = ["runtime-tokio", "rust_decimal", "chrono", "uuid"], optional = true }
# sqlx-postgres = { version = "0.8.3", optional = true }
# sqlx-mysql = { version = "0.8.3", optional = true }
# sqlx-sqlite = { version = "0.8.3", optional = true }
# thiserror = "2.0.11"
# tokio = { version = "1.43.0", features = ["full"] }
# uuid = { version = "1.15.1", features = ["v4", "serde"] }

# [features]
# default = []
# cors = ["dep:actix-cors"]
# logging = ["dep:log", "dep:log4rs"]
# postgres = ["sqlx/postgres"]
# mysql = ["sqlx/mysql"]
# sqlite = ["sqlx/sqlite"]
# '''

[files."Cargo.toml"]
template = '''[package]
name = "{{project-name}}"
version = "0.1.0"
edition = "2021"
description = "{{description}}"
authors = ["{{author_name}}"]

[dependencies]
actix-governor = "0.8.0"
actix-web = "4.9.0"
actix-cors = { version = "0.7.0", optional = true }
chrono = { version = "0.4.40", features = ["serde"] }
dotenv = "0.15.0"
log = { version = "0.4.26", optional = true }
log4rs = { version = "1.3.0", optional = true }
rust_decimal = "1.36.0"
serde = { version = "1.0.218", features = ["derive"] }
serde_json = "1.0.139"
sqlx = { version = "0.8.3", features = ["runtime-tokio", "rust_decimal", "chrono", "uuid"], optional = true }
sqlx-postgres = { version = "0.8.3", optional = true }
sqlx-mysql = { version = "0.8.3", optional = true }
sqlx-sqlite = { version = "0.8.3", optional = true }
thiserror = "2.0.11"
tokio = { version = "1.43.0", features = ["full"] }
uuid = { version = "1.15.1", features = ["v4", "serde"] }

[features]
default = []
cors = ["dep:actix-cors"]
logging = ["dep:log", "dep:log4rs"]
postgres = ["sqlx/postgres"]
mysql = ["sqlx/mysql"]
sqlite = ["sqlx/sqlite"]'''