[template]
cargo_generate_version = ">=0.18.0"
ignore = [
    ".git",
    "Cargo.lock",
    ".env",
    "Dockerfile",
    "docker-compose.yml",
    "read.txt",
]
include = ["Cargo.toml", "features = ["]
[placeholders.description]
type = "string"
prompt = "Provide a short description of your project. This will appear in Cargo.toml and documentation (e.g., 'A Rust web server with Actix and your chosen database')."
default = "A Rust web server application built with Actix"

[placeholders.author_name]
type = "string"
prompt = "Enter your name. This will be listed as the author in Cargo.toml."
default = "Your Name"

[placeholders.database]
prompt = "Choose your database:    - postgres: PostgreSQL, a powerful relational database (requires a server).    - mysql: MySQL, a popular relational database (requires a server).    - sqlite: SQLite, a lightweight, file-based database (no server needed)."
type = "string"
choices = ["postgres", "mysql", "sqlite"]
default = "sqlite"
description = "The database backend for your project."

[placeholders.db_name]
type = "string"
prompt = "Enter the name of your database (e.g., 'mydb'). For SQLite, this will be the file name (e.g., 'mydb.sqlite')."
default = "mydb"
regex = "^[a-zA-Z][a-zA-Z0-9_-]*$"
description = "The name of the database used in the DATABASE_URL."

[placeholders.include_env]
type = "bool"
prompt = "Do you want to generate a .env file? This will create a .env file with HOST, PORT, and DATABASE_URL settings based on your inputs."
default = true

[placeholders.include_logging]
type = "bool"
prompt = "Do you want to include logging? This adds the log and log4rs crates for detailed logging to debug and monitor your application."
default = true

[placeholders.include_cors]
type = "bool"
prompt = "Do you want to include CORS support? This enables Cross-Origin Resource Sharing, needed if your API is accessed by web browsers from different domains."
default = true

[placeholders.server_port]
type = "string"
prompt = "Specify the port for your server (e.g., '8080'). You can change this later in the .env file."
default = "8080"
regex = "^[0-9]+$"
description = "The port your web server will listen on."

[placeholders.use_docker]
type = "bool"
prompt = "Do you want to include Docker configuration? This generates a Dockerfile and docker-compose.yml to run your app and database in containers."
default = false

# Conditional file generation
[conditional.'include_env == true'.files.".env"]
template = """
HOST=127.0.0.1
PORT={{server_port}}
{% if database == "postgres" %}
DATABASE_URL=postgres://user:password@localhost:5432/{{db_name}}
{% elsif database == "mysql" %}
DATABASE_URL=mysql://user:password@localhost:3306/{{db_name}}
{% elsif database == "sqlite" %}
DATABASE_URL=sqlite://{{db_name}}.sqlite
{% endif %}
"""

[conditional.'use_docker == true'.files."Dockerfile"]
template = """
FROM rust:1.83 AS builder
WORKDIR /usr/src/{{project-name}}
COPY . .
RUN cargo build --release

FROM rust:1.83-slim
WORKDIR /usr/src/{{project-name}}
COPY --from=builder /usr/src/{{project-name}}/target/release/{{project-name}} .
COPY log4rs.yaml .
EXPOSE {{server_port}}
CMD ["./{{project-name}}"]
"""

[conditional.'use_docker == true'.files."docker-compose.yml"]
template = """
version: '3.8'
services:
  app:
    build: .
    ports:
      - "{{server_port}}:{{server_port}}"
    {% if database == "postgres" %}
    depends_on:
      - db
    {% elsif database == "mysql" %}
    depends_on:
      - db
    {% endif %}
    {% if include_env %}
    env_file:
      - .env
    {% endif %}
    environment:
      - RUST_LOG=info
  {% if database == "postgres" %}
  db:
    image: postgres:15
    environment:
      - POSTGRES_DB={{db_name}}
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - db-data:/var/lib/postgresql/data
  {% elsif database == "mysql" %}
  db:
    image: mysql:8.0
    environment:
      - MYSQL_DATABASE={{db_name}}
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    volumes:
      - db-data:/var/lib/mysql
  {% endif %}
{% if database == "postgres" || database == "mysql" %}
volumes:
  db-data:
{% endif %}
"""
[hooks]
pre = [
    "cargo build --features {{#if include_cors}}cors{{/if}} {{#if include_logging}}logging{{/if}} {{database}}"
]